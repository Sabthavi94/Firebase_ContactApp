{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\ReactNative_Projects\\\\FirebaseContactAppStart\\\\screens\\\\HomeScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Card } from \"native-base\";\nimport { Entypo } from \"@expo/vector-icons\";\nimport * as firebase from 'firebase';\n\nvar HomeScreen = function (_React$Component) {\n  _inherits(HomeScreen, _React$Component);\n\n  var _super = _createSuper(HomeScreen);\n\n  function HomeScreen(props) {\n    var _this;\n\n    _classCallCheck(this, HomeScreen);\n\n    _this = _super.call(this, props);\n\n    _this.getAllContact = function () {\n      var self = _assertThisInitialized(_this);\n\n      var contactRef = firebase.database().ref();\n      contactRef.on(\"value\", function (dataSnapshot) {\n        if (dataSnapshot.val()) {\n          var contactResult = Object.values(dataSnapshot.val());\n          var contactKey = Object.keys(dataSnapshot.val());\n          contactKey.forEach(function (value, key) {\n            contactResult[key][\"key\"] = value;\n          });\n          self.setState({\n            data: contactResult.sort(function (a, b) {\n              var nameA = a.fname.toUpperCase();\n              var nameB = b.fname.toUpperCase();\n\n              if (nameA < nameB) {\n                return -1;\n              }\n\n              if (nameA > nameB) {\n                return 1;\n              }\n\n              return 0;\n            }),\n            isListEmpty: false\n          });\n        } else {\n          self.setState({\n            isListEmpty: true\n          });\n        }\n\n        self.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    _this.state = {\n      data: [],\n      isLoading: true,\n      isListEmpty: false\n    };\n    return _this;\n  }\n\n  _createClass(HomeScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getAllContact();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.isLoading) {\n        return React.createElement(View, {\n          style: {\n            flex: 1,\n            alignContent: \"center\",\n            justifyContent: \"center\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 9\n          }\n        }, React.createElement(ActivityIndicator, {\n          size: \"large\",\n          color: \"#B83227\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 11\n          }\n        }), React.createElement(Text, {\n          style: {\n            textAlign: \"center\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 11\n          }\n        }, \"Contacts loading please wait..\"));\n      } else if (this.state.isListEmpty) {\n        return React.createElement(View, {\n          style: {\n            flex: 1,\n            alignContent: \"center\",\n            justifyContent: \"center\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 9\n          }\n        }, React.createElement(Entypo, {\n          style: {\n            alignSelf: \"center\"\n          },\n          name: \"plus\",\n          size: 35,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 11\n          }\n        }), React.createElement(Text, {\n          style: {\n            textAlign: \"center\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }\n        }, \"No Contacts please Add\"), React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            _this2.props.navigation.navigate(\"Add\");\n          },\n          style: styles.floatButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }\n        }, React.createElement(Entypo, {\n          name: \"plus\",\n          size: 30,\n          color: \"#fff\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }\n        })));\n      }\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 7\n        }\n      }, React.createElement(FlatList, {\n        data: this.state.data,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return React.createElement(TouchableOpacity, {\n            onPress: function onPress() {\n              _this2.props.navigation.navigate(\"View\", {\n                key: item.key\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }\n          }, React.createElement(Card, {\n            style: styles.listItem,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }\n          }, React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 19\n            }\n          }, React.createElement(Image, {\n            style: styles.contactIcon,\n            source: item.imageUrl === \"empty\" ? require(\"../assets/person.png\") : {\n              uri: item.imageUrl\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 21\n            }\n          })), React.createElement(View, {\n            style: styles.infoContainer,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 19\n            }\n          }, React.createElement(Text, {\n            style: styles.infoText,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 21\n            }\n          }, item.fname, \" \", item.lname), React.createElement(Text, {\n            style: styles.infoText,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 21\n            }\n          }, item.phone))));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }\n      }), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          _this2.props.navigation.navigate(\"Add\");\n        },\n        style: styles.floatButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }\n      }, React.createElement(Entypo, {\n        name: \"plus\",\n        size: 30,\n        color: \"#fff\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return HomeScreen;\n}(React.Component);\n\nexport { HomeScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\"\n  },\n  listItem: {\n    flexDirection: \"row\",\n    padding: 20\n  },\n  contactIcon: {\n    width: 60,\n    height: 60,\n    borderRadius: 100\n  },\n  infoContainer: {\n    flexDirection: \"column\"\n  },\n  infoText: {\n    fontSize: 16,\n    fontWeight: \"400\",\n    paddingLeft: 10,\n    paddingTop: 2\n  },\n  floatButton: {\n    borderWidth: 1,\n    borderColor: \"rgba(0,0,0,0.2)\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: 60,\n    position: \"absolute\",\n    bottom: 10,\n    right: 10,\n    height: 60,\n    backgroundColor: \"#B83227\",\n    borderRadius: 100\n  }\n});","map":{"version":3,"sources":["C:/Users/DELL/Desktop/ReactNative_Projects/FirebaseContactAppStart/screens/HomeScreen.js"],"names":["React","Card","Entypo","firebase","HomeScreen","props","getAllContact","self","contactRef","database","ref","on","dataSnapshot","val","contactResult","Object","values","contactKey","keys","forEach","value","key","setState","data","sort","a","b","nameA","fname","toUpperCase","nameB","isListEmpty","isLoading","state","flex","alignContent","justifyContent","textAlign","alignSelf","navigation","navigate","styles","floatButton","container","item","listItem","contactIcon","imageUrl","require","uri","infoContainer","infoText","lname","phone","Component","StyleSheet","create","backgroundColor","flexDirection","padding","width","height","borderRadius","fontSize","fontWeight","paddingLeft","paddingTop","borderWidth","borderColor","alignItems","position","bottom","right"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  TouchableOpacity,\r\n  Text,\r\n  View,\r\n  FlatList,\r\n  Image,\r\n  ActivityIndicator\r\n} from \"react-native\";\r\nimport { Card } from \"native-base\";\r\nimport { Entypo } from \"@expo/vector-icons\";\r\nimport * as firebase from 'firebase';\r\n\r\nexport default class HomeScreen extends React.Component {\r\n \r\n  \r\n  constructor(props) {\r\n    super(props);\r\n     this.state = {\r\n      data: [],\r\n      isLoading: true,\r\n      isListEmpty: false\r\n    };\r\n  }\r\n \r\n  componentDidMount() {\r\n    this.getAllContact();\r\n  }\r\n \r\n  getAllContact = () => {\r\n    let self = this;\r\n    let contactRef = firebase.database().ref();\r\n    //on listener will be called every time if there any changes happen in contact list\r\n    contactRef.on(\"value\",dataSnapshot=>{\r\n      if(dataSnapshot.val()){\r\n        let contactResult= Object.values(dataSnapshot.val());\r\n        let  contactKey = Object.keys(dataSnapshot.val());\r\n        contactKey.forEach((value, key)=>{\r\n          contactResult [key] [\"key\"] = value;\r\n        })\r\n\r\n        self.setState({\r\n          data: contactResult.sort((a,b)=>{\r\n            var nameA = a.fname.toUpperCase();\r\n            var nameB = b.fname.toUpperCase();\r\n    \r\n            if(nameA<nameB){\r\n              return -1;\r\n            }\r\n            if(nameA>nameB){\r\n              return 1;\r\n            }\r\n            return 0;\r\n          }),\r\n          isListEmpty:false\r\n          \r\n        })\r\n      }\r\n      else{\r\n        self.setState({ isListEmpty:true });\r\n      }\r\n      self.setState({ isLoading:false });\r\n\r\n    });\r\n\r\n    \r\n  };\r\n\r\n  // render method\r\n  render() {\r\n    // if its loading show ActivityIndicator\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <View\r\n          style={{ flex: 1, alignContent: \"center\", justifyContent: \"center\" }}\r\n        >\r\n          <ActivityIndicator size=\"large\" color=\"#B83227\" />\r\n          <Text style={{ textAlign: \"center\" }}>\r\n            Contacts loading please wait..\r\n          </Text>\r\n        </View>\r\n      );\r\n    } else if (this.state.isListEmpty) {\r\n      // else if loading is completed and no contact found show this\r\n      return (\r\n        <View\r\n          style={{ flex: 1, alignContent: \"center\", justifyContent: \"center\" }}\r\n        >\r\n          <Entypo style={{ alignSelf: \"center\" }} name=\"plus\" size={35} />\r\n          <Text style={{ textAlign: \"center\" }}>No Contacts please Add</Text>\r\n          <TouchableOpacity\r\n            onPress={() => {\r\n              // add icon\r\n              //navigate to Add Contact screen\r\n              this.props.navigation.navigate(\"Add\");\r\n            }}\r\n            style={styles.floatButton}\r\n          >\r\n            <Entypo name=\"plus\" size={30} color=\"#fff\" />\r\n          </TouchableOpacity>\r\n        </View>\r\n      );\r\n    }\r\n    // return list of contacts\r\n    return (\r\n      <View style={styles.container}>\r\n        <FlatList\r\n          data={this.state.data}\r\n          renderItem={({ item }) => {\r\n            return (\r\n              <TouchableOpacity\r\n                onPress={() => {\r\n                  //navigate to view contact screen with passing key\r\n                  this.props.navigation.navigate(\"View\", {\r\n                    key: item.key\r\n                  });\r\n                }}\r\n              >\r\n                <Card style={styles.listItem}>\r\n                  <View>\r\n                    <Image\r\n                      style={styles.contactIcon}\r\n                      source={\r\n                        item.imageUrl === \"empty\"\r\n                          ? require(\"../assets/person.png\")\r\n                          : { uri: item.imageUrl }\r\n                      }\r\n                    />\r\n                  </View>\r\n                  <View style={styles.infoContainer}>\r\n                    <Text style={styles.infoText}>\r\n                      {item.fname} {item.lname}\r\n                    </Text>\r\n                    <Text style={styles.infoText}>{item.phone}</Text>\r\n                  </View>\r\n                </Card>\r\n              </TouchableOpacity>\r\n            );\r\n          }}\r\n        />\r\n\r\n        <TouchableOpacity\r\n          onPress={() => {\r\n            // add icon\r\n            //navigate to Add Contact screen\r\n            this.props.navigation.navigate(\"Add\");\r\n          }}\r\n          style={styles.floatButton}\r\n        >\r\n          <Entypo name=\"plus\" size={30} color=\"#fff\" />\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n// styles\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\"\r\n  },\r\n  listItem: {\r\n    flexDirection: \"row\",\r\n    padding: 20\r\n  },\r\n  contactIcon: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: 100\r\n  },\r\n  infoContainer: {\r\n    flexDirection: \"column\"\r\n  },\r\n  infoText: {\r\n    fontSize: 16,\r\n    fontWeight: \"400\",\r\n    paddingLeft: 10,\r\n    paddingTop: 2\r\n  },\r\n  floatButton: {\r\n    borderWidth: 1,\r\n    borderColor: \"rgba(0,0,0,0.2)\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    width: 60,\r\n    position: \"absolute\",\r\n    bottom: 10,\r\n    right: 10,\r\n    height: 60,\r\n    backgroundColor: \"#B83227\",\r\n    borderRadius: 100\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}